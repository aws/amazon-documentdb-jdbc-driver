plugins {
    id 'java'
    id 'com.github.spotbugs' version '4.5.1'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.kordamp.gradle.markdown' version '2.2.0'
}

def majorVersion = 1
def minorVersion = 0
def patchVersion = 0
def betaVersion = 6

group 'software.amazon.documentdb.jdbc'
version "${majorVersion}.${minorVersion}.${patchVersion}-beta.${betaVersion}"
description 'documentdb-jdbc-driver'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding 'UTF-8'
}
// Silently agree to build scan terms.
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Version': archiveVersion.get(),
                'Main-Class': 'software.amazon.documentdb.jdbc.DocumentDbMain')
    }
}

shadowJar {
    //  Exclude driver unnecessary classes.
    exclude 'org/apache/calcite/jdbc/Driver*'
    exclude 'org/apache/calcite/avatica/remote/Driver*'
    exclude 'org/apache/commons/dbcp2/PoolingDriver*'

    // Relocate (shadow) the following packages.
    relocate 'org.apache.calcite', 'org.apache.calcite.shadow'
    relocate 'com.google.guava', 'com.google.guava.shadow'
    relocate 'com.google.common', 'com.google.common.shadow'
    relocate 'org.mongodb', 'org.mongodb.shadow'
    // Remove any unused dependencies (excluding Calcite)
    minimize {
        exclude(dependency('org.apache.calcite::'))
        exclude(dependency('org.slf4j.*::'))
    }
}

artifacts {
    archives shadowJar
}

test {
    useJUnitPlatform {
        if (project.hasProperty('runRemoteIntegrationTests') && project.property('runRemoteIntegrationTests') == 'false') {
            environment "connectionString", project.CONNECTION_STRING_LOCAL
            // Ensure to match the enumeration name exactly from DocumentDbTestEnvironmentType.
            environment "CONFIGURED_ENVIRONMENTS", "MONGODB40_FLAPDOODLE"
            excludeTags 'remote-integration'
        } else {
            environment "connectionString", project.CONNECTION_STRING_REMOTE
            // Ensure to match the enumeration name exactly from DocumentDbTestEnvironmentType.
            environment "CONFIGURED_ENVIRONMENTS", "MONGODB40_FLAPDOODLE,DOCUMENTDB40_SSH_TUNNEL"
            excludeTags 'local-integration'
        }
    }
}

/**
 * CheckStyle Plugin
 */
apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.37'
    configFile file("config/checkstyle/checkstyle-rules.xml")
    ignoreFailures = false
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

/**
 * SpotBugs Plugin
 */
spotbugs {
    showStackTraces = false
    reportsDir = file("$buildDir/reports/spotbugs")
    ignoreFailures = false
    excludeFilter = file("config/spotbugs/spotbugs-exclude.xml")
}
spotbugsMain {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}
spotbugsTest {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test.xml")
        }
    }
}

task checkSpotBugsMainReport {
    doLast {
        def xmlReport = spotbugsMain.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

task checkSpotBugsTestReport {
    doLast {
        def xmlReport = spotbugsTest.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            //TODO Temporary ignoring, as dedicated set of rules should be defined
            //throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

spotbugsMain.finalizedBy checkSpotBugsMainReport
spotbugsTest.finalizedBy checkSpotBugsTestReport

/**
 * JaCoCo Plugin
 */
test {
    jacoco {
        excludes = ['org/codehaus/**', 'org.codehaus.*']
    }
}
jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            project.logger.info('it' + it)
            fileTree(dir: it,
                     exclude: ['**/resources/**', '**janino**', '**commons**'])
        }))
    }

}
test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['org.codehaus.*']
            limit {
                counter = 'LINE'
                minimum = 0.00
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                     exclude: ['org/codehaus/**'])
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

/**
 * License Plugin
 */
license {
    header =  project.file('license-header.txt')
    headerDefinitions {
        slash_star_with_space {
            firstLine = '/*'
            endLine   = ' *\n */\n'
            beforeEachLine = ' * '
            firstLineDetectionPattern = '/\\*'
            lastLineDetectionPattern  = ' \\*\n \\*/\n'
        }
    }
    mapping {
        java = 'slash_star_with_space'
    }
}

/**
 * Write driver version data to properties file.
 */
task writeProperties(type: WriteProperties) {
    outputFile("$projectDir/src/main/resources/project.properties")
    property("driver.major.version", majorVersion)
    property("driver.minor.version", minorVersion)
    property("driver.full.version", project.version)
}

processResources {
    from(writeProperties)
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

repositories {
    maven {
        url 'https://raw.githubusercontent.com/birschick-bq/janino/brucei/ad-189/maven'
    }
    mavenCentral()
}

dependencies {
    implementation project(":calcite-adapter")
    implementation project(":common")
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: '2.12.3'
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.1.1'

    compileOnly         group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.8'
    compileOnly         'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testImplementation(testFixtures(project(':common')))
    testCompileOnly         group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    testCompileOnly         group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    testImplementation      group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '3.0.0'
    testImplementation      group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation      group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
    testImplementation      group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.2'
    testImplementation      group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
    testRuntimeOnly         group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}
